// <auto-generated />
using BooksApp.DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BooksApp.DAL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241015163509_EntitiesUpdateNew")]
    partial class EntitiesUpdateNew
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BooksApp.Domain.Entities.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Books");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("BooksApp.Domain.Entities.Publisher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Publishers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Country = "Belarus",
                            Name = "Ad Press"
                        },
                        new
                        {
                            Id = 2,
                            Country = "Poland",
                            Name = "Academic Studies"
                        });
                });

            modelBuilder.Entity("BooksApp.Domain.Entities.PublisherBook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("PublisherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("PublisherId");

                    b.ToTable("PublisherBooks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookId = 1,
                            PublisherId = 1
                        },
                        new
                        {
                            Id = 2,
                            BookId = 2,
                            PublisherId = 1
                        },
                        new
                        {
                            Id = 3,
                            BookId = 3,
                            PublisherId = 2
                        },
                        new
                        {
                            Id = 4,
                            BookId = 4,
                            PublisherId = 2
                        });
                });

            modelBuilder.Entity("BooksApp.Domain.Entities.EducationalBook", b =>
                {
                    b.HasBaseType("BooksApp.Domain.Entities.Book");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Speciality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("EducationalBooks", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 3,
                            Author = "Natalya Shulzhenka",
                            Name = "C# for adults",
                            Year = 2015,
                            Level = "Adults",
                            Speciality = "Programming"
                        },
                        new
                        {
                            Id = 4,
                            Author = "Mister Bean",
                            Name = "How to learn",
                            Year = 2005,
                            Level = "Childrren",
                            Speciality = "Psycology"
                        });
                });

            modelBuilder.Entity("BooksApp.Domain.Entities.FictionBook", b =>
                {
                    b.HasBaseType("BooksApp.Domain.Entities.Book");

                    b.Property<int>("AgeRestrictions")
                        .HasColumnType("int");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("FictionBooks", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Author = "Joanne Rowling",
                            Name = "Harry Potter",
                            Year = 2000,
                            AgeRestrictions = 6,
                            Genre = "Fantasy"
                        },
                        new
                        {
                            Id = 2,
                            Author = "John Ronald Reuel Tolkien",
                            Name = "The Lord of the Rings",
                            Year = 2010,
                            AgeRestrictions = 18,
                            Genre = "Mystery"
                        });
                });

            modelBuilder.Entity("BooksApp.Domain.Entities.PublisherBook", b =>
                {
                    b.HasOne("BooksApp.Domain.Entities.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BooksApp.Domain.Entities.Publisher", "Publisher")
                        .WithMany("PublisherBooks")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("BooksApp.Domain.Entities.EducationalBook", b =>
                {
                    b.HasOne("BooksApp.Domain.Entities.Book", null)
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BooksApp.Domain.Entities.FictionBook", b =>
                {
                    b.HasOne("BooksApp.Domain.Entities.Book", null)
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BooksApp.Domain.Entities.Publisher", b =>
                {
                    b.Navigation("PublisherBooks");
                });
#pragma warning restore 612, 618
        }
    }
}
